name: Cosmos SDK Armor Export PoC

on: [push]

jobs:
  demonstrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y make gcc git curl python3
          curl -LO https://golang.org/dl/go1.21.5.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Install Gaia
        run: |
          git clone https://github.com/cosmos/gaia.git
          cd gaia
          git checkout v15.1.0
          make install

      - name: Create test key
        run: |
          gaiad keys add victimkey --keyring-backend test --home /tmp/gaia_temp <<< $'y\npassword\npassword'

      - name: Create malicious proxy
        run: |
          cat <<EOF > shortwrite_proxy.py
          #!/usr/bin/env python3
          import sys
          while True:
              chunk = sys.stdin.buffer.read(1024)
              if not chunk:
                  break
              sys.stdout.buffer.write(chunk[:10])  # truncate to 10 bytes
              sys.stdout.flush()
          EOF
          chmod +x shortwrite_proxy.py

      - name: Demonstrate corruption
        run: |
          # This will produce a corrupted key without error
          gaiad keys export victimkey --keyring-backend test --home /tmp/gaia_temp | ./shortwrite_proxy.py > corrupted_key.asc
          
          # Verify the export appeared to succeed
          echo "Export command exit code: $?"
          echo "Corrupted key contents:"
          cat corrupted_key.asc
          
          # Attempt to import (should fail)
          gaiad keys import victimkey_restored corrupted_key.asc --keyring-backend test --home /tmp/gaia_temp || echo "Import failed as expected"